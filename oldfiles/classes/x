let stringStuff = ["toString", "valueOf", "inspect", Symbol.toPrimitive, util.inspect.custom];

let handler = {
  get(t, k, r) {
    const listToUse = [];
    for (const item of (t.list || [])) {
      if (typeof item === "string") {
        listToUse.push(item);
      }
    }
    if (k === "list") {
      return listToUse.slice(0);
    } else if (k === "query") {
      return async () => "B"; // TODO Magic querying stuff
    } else if (k === "proxy") {
      return r;
    } else if (stringStuff.includes(k)) {
      return () => listToUse.join(" ");
    } else if (t[k]) {
      return t[k];
    }
    if (typeof k === "string") { listToUse.push(k); }
    t.list = listToUse;
    // const newFunc = Object.assign(t, { list: listToUse });
    // const newFunc = objToUse.bind(objToUse);
    return r; // new Proxy(newFunc, handler);
  },
  set(t, k, v, r) {
    if (k === "list") { return false; }
    if (k === "proxy") {
      if (t.proxy) { return false; }
      t.proxy = r;
      return true;
    }
    t[k] = v;
    return true;
  },
};

let funct = function gen() {
  return function database(...args) {
    const zeDb = database;
    let stringToPush = args.join(",");
    if (/^p$/i.test(zeDb.list[zeDb.list.length - 1])) {
      stringToPush = `(${stringToPush})`;
      zeDb.list.pop();
    }
    zeDb.list.push(stringToPush);
    return database.proxy;
  };
};

let db = () => {
  const proxy = new Proxy(funct(), handler);
  proxy.proxy = proxy;
  return proxy;
};

db;
